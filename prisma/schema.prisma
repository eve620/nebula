generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  nickname     String
  password     String
  image        String?
  bio          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         UserRole       @default(User)
  project      Project[]
  progress     Progress?
  event        Event[]
  article      Article[]
  comment      Comment[]
  like         Like[]
  dailyCheckIn DailyCheckIn[]
  ChildComment ChildComment[]
}

enum UserRole {
  User
  Admin
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  startTime   DateTime?
  endTime     DateTime?
  job         String    @default("")
  stacks      String    @default("[]")
  describe    String    @default("") @db.VarChar(2048)
  highlight   String    @default("")
  imageUrl    String    @default("[]")
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Progress {
  id          Int      @id @default(autoincrement())
  course      String
  wordIndex   Int
  createdById Int      @unique
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notice {
  id        Int      @id @default(autoincrement())
  time      DateTime
  title     String
  version   String
  content   String   @db.VarChar(2048)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  toDo        String   @db.Text
  inProgress  String   @db.Text
  completed   String   @db.Text
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, createdById])
}

model Tag {
  id        Int      @id @default(autoincrement())
  content   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          Int        @id @default(autoincrement())
  title       String
  content     String     @db.Text
  tags        String     @default("[]") @db.VarChar(1024)
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  viewCount   Int        @default(0)
  isPinned    Boolean    @default(false)
  isLocked    Boolean    @default(false)
  visibility  Visibility @default(PUBLIC)
  comments    Comment[]
  likes       Like[]
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String         @db.VarChar(1024)
  articleId     Int
  article       Article        @relation(fields: [articleId], references: [id])
  createdById   Int
  createdBy     User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  childComments ChildComment[]
}

model ChildComment {
  id          Int      @id @default(autoincrement())
  content     String   @db.VarChar(1024)
  replyTo     String?
  commentToId Int
  commentTo   Comment  @relation(fields: [commentToId], references: [id], onDelete: Cascade)
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model DailyCheckIn {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkInDate DateTime @default(now())

  @@unique([userId, checkInDate])
  @@index([userId, checkInDate])
}
